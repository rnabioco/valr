% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bed_map.r
\name{bed_map}
\alias{bed_map}
\alias{concat}
\alias{first}
\alias{last}
\alias{values}
\alias{values_unique}
\title{Map signals over intervals.}
\usage{
bed_map(x, y, ..., invert = FALSE, strand = FALSE, strand_opp = FALSE,
  suffix = c(".x", ".y"), min_overlap = 1)

concat(.data, sep = ",")

values_unique(.data, sep = ",")

values(.data, sep = ",")

first(.data)

last(.data)
}
\arguments{
\item{x}{tbl of intervals}

\item{y}{tbl of intervals}

\item{...}{name-value pairs of summary functions like \code{\link{min}()}, 
\code{\link{count}()}, \code{\link{concat}()}.}

\item{invert}{report `x` intervals not in `y`}

\item{strand}{intersect intervals on same strand}

\item{strand_opp}{intersect intervals on opposite strands}

\item{suffix}{colname suffixes in output}

\item{min_overlap}{minimum overlap for intervals.}

\item{.data}{data}

\item{sep}{separator character}
}
\value{
\code{data_frame}
}
\description{
Multiple mapping functions can be specified.
}
\note{
Book-ended intervals are not reported by default, but can be included
  by setting \code{min_overlap} to \code{0}.
}
\examples{
x <- tibble::tribble(
  ~chrom, ~start, ~end,
  'chr1',      1,      100
)

y <- tibble::tribble(
  ~chrom, ~start, ~end, ~value,
  'chr1',      1,     20,    10,
  'chr1',      30,    50,    20,
  'chr1',      90,    120,   30
)

bed_glyph(bed_map(x, y, value = sum(value)), label = 'value')

x <- tibble::tribble(
 ~chrom, ~start, ~end,
 "chr1", 100, 250,
 "chr2", 250, 500)
 
y <- tibble::tribble(
 ~chrom, ~start, ~end, ~value,
 "chr1", 100, 250, 10,
 "chr1", 150, 250, 20,
 "chr2", 250, 500, 500)

# also mean, median, sd etc
bed_map(x, y, sum = sum(value))
bed_map(x, y, min = min(value), max = max(value))

bed_map(x, y, concat(value))
bed_map(x, y, first(value))
bed_map(x, y, last(value))

bed_map(x, y, absmax = abs(max(value)))
bed_map(x, y, absmin = abs(min(value)))
bed_map(x, y, count = length(value))
bed_map(x, y, count_distinct = length(unique(value)))

bed_map(x, y, vals = values(value))
bed_map(x, y, vals.unique = values_unique(value))

}
\seealso{
\url{http://bedtools.readthedocs.io/en/latest/content/tools/map.html}
}

