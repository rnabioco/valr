// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/valr.h"
#include <Rcpp.h>

using namespace Rcpp;

// bed12toexons_impl
DataFrame bed12toexons_impl(DataFrame x);
RcppExport SEXP _valr_bed12toexons_impl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bed12toexons_impl(x));
    return rcpp_result_gen;
END_RCPP
}
// closest_impl
DataFrame closest_impl(GroupedDataFrame x, GroupedDataFrame y, const std::string& suffix_x, const std::string& suffix_y);
RcppExport SEXP _valr_closest_impl(SEXP xSEXP, SEXP ySEXP, SEXP suffix_xSEXP, SEXP suffix_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< GroupedDataFrame >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type suffix_x(suffix_xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type suffix_y(suffix_ySEXP);
    rcpp_result_gen = Rcpp::wrap(closest_impl(x, y, suffix_x, suffix_y));
    return rcpp_result_gen;
END_RCPP
}
// complement_impl
DataFrame complement_impl(GroupedDataFrame gdf, DataFrame genome);
RcppExport SEXP _valr_complement_impl(SEXP gdfSEXP, SEXP genomeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type gdf(gdfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type genome(genomeSEXP);
    rcpp_result_gen = Rcpp::wrap(complement_impl(gdf, genome));
    return rcpp_result_gen;
END_RCPP
}
// coverage_impl
DataFrame coverage_impl(GroupedDataFrame x, GroupedDataFrame y);
RcppExport SEXP _valr_coverage_impl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< GroupedDataFrame >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(coverage_impl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dist_impl
DataFrame dist_impl(GroupedDataFrame x, GroupedDataFrame y, std::string distcalc);
RcppExport SEXP _valr_dist_impl(SEXP xSEXP, SEXP ySEXP, SEXP distcalcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< GroupedDataFrame >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type distcalc(distcalcSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_impl(x, y, distcalc));
    return rcpp_result_gen;
END_RCPP
}
// flank_impl
DataFrame flank_impl(DataFrame df, DataFrame genome, double both, double left, double right, bool fraction, bool stranded, bool trim);
RcppExport SEXP _valr_flank_impl(SEXP dfSEXP, SEXP genomeSEXP, SEXP bothSEXP, SEXP leftSEXP, SEXP rightSEXP, SEXP fractionSEXP, SEXP strandedSEXP, SEXP trimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type genome(genomeSEXP);
    Rcpp::traits::input_parameter< double >::type both(bothSEXP);
    Rcpp::traits::input_parameter< double >::type left(leftSEXP);
    Rcpp::traits::input_parameter< double >::type right(rightSEXP);
    Rcpp::traits::input_parameter< bool >::type fraction(fractionSEXP);
    Rcpp::traits::input_parameter< bool >::type stranded(strandedSEXP);
    Rcpp::traits::input_parameter< bool >::type trim(trimSEXP);
    rcpp_result_gen = Rcpp::wrap(flank_impl(df, genome, both, left, right, fraction, stranded, trim));
    return rcpp_result_gen;
END_RCPP
}
// intersect_impl
DataFrame intersect_impl(GroupedDataFrame x, GroupedDataFrame y, const std::string& suffix_x, const std::string& suffix_y);
RcppExport SEXP _valr_intersect_impl(SEXP xSEXP, SEXP ySEXP, SEXP suffix_xSEXP, SEXP suffix_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< GroupedDataFrame >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type suffix_x(suffix_xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type suffix_y(suffix_ySEXP);
    rcpp_result_gen = Rcpp::wrap(intersect_impl(x, y, suffix_x, suffix_y));
    return rcpp_result_gen;
END_RCPP
}
// makewindows_impl
DataFrame makewindows_impl(DataFrame df, int win_size, int num_win, int step_size, bool reverse);
RcppExport SEXP _valr_makewindows_impl(SEXP dfSEXP, SEXP win_sizeSEXP, SEXP num_winSEXP, SEXP step_sizeSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type win_size(win_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_win(num_winSEXP);
    Rcpp::traits::input_parameter< int >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(makewindows_impl(df, win_size, num_win, step_size, reverse));
    return rcpp_result_gen;
END_RCPP
}
// merge_impl
DataFrame merge_impl(GroupedDataFrame gdf, int max_dist, bool collapse);
RcppExport SEXP _valr_merge_impl(SEXP gdfSEXP, SEXP max_distSEXP, SEXP collapseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type gdf(gdfSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< bool >::type collapse(collapseSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_impl(gdf, max_dist, collapse));
    return rcpp_result_gen;
END_RCPP
}
// random_impl
DataFrame random_impl(DataFrame genome, int length, int n, int seed, std::string col_chrom, std::string col_size);
RcppExport SEXP _valr_random_impl(SEXP genomeSEXP, SEXP lengthSEXP, SEXP nSEXP, SEXP seedSEXP, SEXP col_chromSEXP, SEXP col_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type genome(genomeSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_chrom(col_chromSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_size(col_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(random_impl(genome, length, n, seed, col_chrom, col_size));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_impl
DataFrame shuffle_impl(DataFrame df, DataFrame incl, bool within, int max_tries, int seed);
RcppExport SEXP _valr_shuffle_impl(SEXP dfSEXP, SEXP inclSEXP, SEXP withinSEXP, SEXP max_triesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type incl(inclSEXP);
    Rcpp::traits::input_parameter< bool >::type within(withinSEXP);
    Rcpp::traits::input_parameter< int >::type max_tries(max_triesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_impl(df, incl, within, max_tries, seed));
    return rcpp_result_gen;
END_RCPP
}
// subtract_impl
DataFrame subtract_impl(GroupedDataFrame gdf_x, GroupedDataFrame gdf_y);
RcppExport SEXP _valr_subtract_impl(SEXP gdf_xSEXP, SEXP gdf_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GroupedDataFrame >::type gdf_x(gdf_xSEXP);
    Rcpp::traits::input_parameter< GroupedDataFrame >::type gdf_y(gdf_ySEXP);
    rcpp_result_gen = Rcpp::wrap(subtract_impl(gdf_x, gdf_y));
    return rcpp_result_gen;
END_RCPP
}
